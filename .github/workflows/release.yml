name: Publish Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  build_and_sign:
    # This job builds the appx packages and signs them using the trusted signing service
    runs-on: windows-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore --locked-mode

      - name: Build
        run: dotnet build --configuration Release --no-restore -p Platform=x64 -p GenerateAppxPackageOnBuild=true .\CmdPalExtensions.sln

      - name: Move Appx Packages
        run: |
          # Move the appx packages to one folder for signing
          $msixs = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -File -Filter "*.msix" -exclude "Microsoft.WindowsAppRuntime.*.msix"

          # write the path of each msix (relative to the git root)
          Write-Host "Found the following msix's:"
          foreach($msix in $msixs) {
              # Write-Host "* " + $msix.FullName

              Write-Host "*" $msix.Name "`n"
          }

          $DestinationFolder = Join-Path $Env:GITHUB_WORKSPACE "tmp"
          
          if(Test-Path $DestinationFolder) {
              Remove-Item -Path $DestinationFolder -Recurse -Force | Out-Null
          }
          if(-not (Test-Path $DestinationFolder)) {
              New-Item -ItemType Directory -Path $DestinationFolder -Force | Out-Null
          }

          Write-Host "Copying msix's to $DestinationFolder..."

          foreach($msix in $msixs) {
            Copy-Item -Path $msix -Destination $DestinationFolder -Force
          }
      
      - name: Sign files with Trusted Signing
        uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: baldbeardedbuilder
          certificate-profile-name: baldbeardedbuilder
          files-folder: ${{ github.workspace }}\tmp # This is where the msix files are copied to for signing
          files-folder-filter: msix
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
        
  release:
    runs-on: ubuntu-latest
    needs: build_and_sign
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3

    - uses: ncipollo/release-action@v1
      name: Create a Release
      with:
        artifacts: "${{ github.workspace }}/tmp/*.msix" # Path to the signed msix files to upload as artifacts for the release. Use glob pattern to match all files in the tmp folder.
        name: Release ${{ github.ref }}  # Use the tag as the release title
        allowUpdates: true
        
  # publish:
  #   runs-on: windows-latest
  #   needs: release
  #   permissions:
  #     packages: write
  #     contents: write
  #   steps:
  #     - name: Submit extensions to Winget
  #       run: |

          # $wingetPackage = "MichaelJolley.CmdPalRandomDadJokeExtension"
          # $gitToken = $Env:GH_PAT

          # $github = Invoke-RestMethod -uri "https://api.github.com/repos/michaeljolley/CmdPalExtensions/releases" 

          # $targetRelease = $github | Where-Object -Property name -match 'Release'| Select -First 1
          # $installerUserX64Url = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object -Property name -match 'PowerToysUserSetup.*x64' | Select -ExpandProperty browser_download_url
          # $installerMachineX64Url = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object -Property name -match 'PowerToysSetup.*x64' | Select -ExpandProperty browser_download_url
          # $installerUserArmUrl = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object -Property name -match 'PowerToysUserSetup.*arm64' | Select -ExpandProperty browser_download_url
          # $installerMachineArmUrl = $targetRelease | Select -ExpandProperty assets -First 1 | Where-Object -Property name -match 'PowerToysSetup.*arm64' | Select -ExpandProperty browser_download_url
          # $ver = $targetRelease.tag_name -ireplace '^v'

          # # getting latest wingetcreate file
          # iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
          # .\wingetcreate.exe update $wingetPackage -s -v $ver -u "$installerUserX64Url|user" "$installerMachineX64Url|machine" "$installerUserArmUrl|user" "$installerMachineArmUrl|machine" -t $gitToken